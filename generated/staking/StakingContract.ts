// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ForceGreylistExited extends ethereum.Event {
  get params(): ForceGreylistExited__Params {
    return new ForceGreylistExited__Params(this);
  }
}

export class ForceGreylistExited__Params {
  _event: ForceGreylistExited;

  constructor(event: ForceGreylistExited) {
    this._event = event;
  }

  get grelisted(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SmartContractDenied extends ethereum.Event {
  get params(): SmartContractDenied__Params {
    return new SmartContractDenied__Params(this);
  }
}

export class SmartContractDenied__Params {
  _event: SmartContractDenied;

  constructor(event: SmartContractDenied) {
    this._event = event;
  }

  get greylistedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SmartContractRecorded extends ethereum.Event {
  get params(): SmartContractRecorded__Params {
    return new SmartContractRecorded__Params(this);
  }
}

export class SmartContractRecorded__Params {
  _event: SmartContractRecorded;

  constructor(event: SmartContractRecorded) {
    this._event = event;
  }

  get smartContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get smartContractInitiator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sharesIssued(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get oldShareVaule(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newShareValue(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get balanceOf(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class StakingDenied extends ethereum.Event {
  get params(): StakingDenied__Params {
    return new StakingDenied__Params(this);
  }
}

export class StakingDenied__Params {
  _event: StakingDenied;

  constructor(event: StakingDenied) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get total(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakingContract extends ethereum.SmartContract {
  static bind(address: Address): StakingContract {
    return new StakingContract("StakingContract", address);
  }

  balanceOf(who: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(who)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(who)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  greylistEscrow(): Address {
    let result = super.call("greylistEscrow", "greylistEscrow():(address)", []);

    return result[0].toAddress();
  }

  try_greylistEscrow(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "greylistEscrow",
      "greylistEscrow():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lpToken(): Address {
    let result = super.call("lpToken", "lpToken():(address)", []);

    return result[0].toAddress();
  }

  try_lpToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lpToken", "lpToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardPool(): Address {
    let result = super.call("rewardPool", "rewardPool():(address)", []);

    return result[0].toAddress();
  }

  try_rewardPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardPool", "rewardPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  share(param0: Address): BigInt {
    let result = super.call("share", "share(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_share(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("share", "share(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  store(): Address {
    let result = super.call("store", "store():(address)", []);

    return result[0].toAddress();
  }

  try_store(): ethereum.CallResult<Address> {
    let result = super.tryCall("store", "store():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalValue(): BigInt {
    let result = super.call("totalValue", "totalValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalValue", "totalValue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unit(): BigInt {
    let result = super.call("unit", "unit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_unit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("unit", "unit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  valuePerShare(): BigInt {
    let result = super.call("valuePerShare", "valuePerShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_valuePerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "valuePerShare",
      "valuePerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _storage(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _greylistEscrow(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ForceGreyListedExitCall extends ethereum.Call {
  get inputs(): ForceGreyListedExitCall__Inputs {
    return new ForceGreyListedExitCall__Inputs(this);
  }

  get outputs(): ForceGreyListedExitCall__Outputs {
    return new ForceGreyListedExitCall__Outputs(this);
  }
}

export class ForceGreyListedExitCall__Inputs {
  _call: ForceGreyListedExitCall;

  constructor(call: ForceGreyListedExitCall) {
    this._call = call;
  }

  get greyListed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ForceGreyListedExitCall__Outputs {
  _call: ForceGreyListedExitCall;

  constructor(call: ForceGreyListedExitCall) {
    this._call = call;
  }
}

export class RefreshAutoStakeCall extends ethereum.Call {
  get inputs(): RefreshAutoStakeCall__Inputs {
    return new RefreshAutoStakeCall__Inputs(this);
  }

  get outputs(): RefreshAutoStakeCall__Outputs {
    return new RefreshAutoStakeCall__Outputs(this);
  }
}

export class RefreshAutoStakeCall__Inputs {
  _call: RefreshAutoStakeCall;

  constructor(call: RefreshAutoStakeCall) {
    this._call = call;
  }
}

export class RefreshAutoStakeCall__Outputs {
  _call: RefreshAutoStakeCall;

  constructor(call: RefreshAutoStakeCall) {
    this._call = call;
  }
}

export class SetGreylistEscrowCall extends ethereum.Call {
  get inputs(): SetGreylistEscrowCall__Inputs {
    return new SetGreylistEscrowCall__Inputs(this);
  }

  get outputs(): SetGreylistEscrowCall__Outputs {
    return new SetGreylistEscrowCall__Outputs(this);
  }
}

export class SetGreylistEscrowCall__Inputs {
  _call: SetGreylistEscrowCall;

  constructor(call: SetGreylistEscrowCall) {
    this._call = call;
  }

  get _greylistEscrow(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGreylistEscrowCall__Outputs {
  _call: SetGreylistEscrowCall;

  constructor(call: SetGreylistEscrowCall) {
    this._call = call;
  }
}

export class SetStorageCall extends ethereum.Call {
  get inputs(): SetStorageCall__Inputs {
    return new SetStorageCall__Inputs(this);
  }

  get outputs(): SetStorageCall__Outputs {
    return new SetStorageCall__Outputs(this);
  }
}

export class SetStorageCall__Inputs {
  _call: SetStorageCall;

  constructor(call: SetStorageCall) {
    this._call = call;
  }

  get _store(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStorageCall__Outputs {
  _call: SetStorageCall;

  constructor(call: SetStorageCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}
