// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Farm extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Farm entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Farm entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Farm", id.toString(), this);
  }

  static load(id: string): Farm | null {
    return store.get("Farm", id) as Farm | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get ratio(): BigInt {
    let value = this.get("ratio");
    return value.toBigInt();
  }

  set ratio(value: BigInt) {
    this.set("ratio", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get netDeposit(): BigInt {
    let value = this.get("netDeposit");
    return value.toBigInt();
  }

  set netDeposit(value: BigInt) {
    this.set("netDeposit", Value.fromBigInt(value));
  }

  get grossDeposit(): BigInt {
    let value = this.get("grossDeposit");
    return value.toBigInt();
  }

  set grossDeposit(value: BigInt) {
    this.set("grossDeposit", Value.fromBigInt(value));
  }

  get grossWithdraw(): BigInt {
    let value = this.get("grossWithdraw");
    return value.toBigInt();
  }

  set grossWithdraw(value: BigInt) {
    this.set("grossWithdraw", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get farmBalances(): Array<string> {
    let value = this.get("farmBalances");
    return value.toStringArray();
  }

  set farmBalances(value: Array<string>) {
    this.set("farmBalances", Value.fromStringArray(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get staked(): BigInt {
    let value = this.get("staked");
    return value.toBigInt();
  }

  set staked(value: BigInt) {
    this.set("staked", Value.fromBigInt(value));
  }

  get stakingRewards(): BigInt {
    let value = this.get("stakingRewards");
    return value.toBigInt();
  }

  set stakingRewards(value: BigInt) {
    this.set("stakingRewards", Value.fromBigInt(value));
  }
}

export class UserfarmBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserfarmBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserfarmBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserfarmBalance", id.toString(), this);
  }

  static load(id: string): UserfarmBalance | null {
    return store.get("UserfarmBalance", id) as UserfarmBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get farm(): string {
    let value = this.get("farm");
    return value.toString();
  }

  set farm(value: string) {
    this.set("farm", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get netDeposit(): BigInt {
    let value = this.get("netDeposit");
    return value.toBigInt();
  }

  set netDeposit(value: BigInt) {
    this.set("netDeposit", Value.fromBigInt(value));
  }

  get grossDeposit(): BigInt {
    let value = this.get("grossDeposit");
    return value.toBigInt();
  }

  set grossDeposit(value: BigInt) {
    this.set("grossDeposit", Value.fromBigInt(value));
  }

  get grossWithdraw(): BigInt {
    let value = this.get("grossWithdraw");
    return value.toBigInt();
  }

  set grossWithdraw(value: BigInt) {
    this.set("grossWithdraw", Value.fromBigInt(value));
  }
}

export class RewardContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RewardContract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RewardContract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RewardContract", id.toString(), this);
  }

  static load(id: string): RewardContract | null {
    return store.get("RewardContract", id) as RewardContract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentRewards(): BigInt {
    let value = this.get("currentRewards");
    return value.toBigInt();
  }

  set currentRewards(value: BigInt) {
    this.set("currentRewards", Value.fromBigInt(value));
  }

  get totalRewards(): BigInt {
    let value = this.get("totalRewards");
    return value.toBigInt();
  }

  set totalRewards(value: BigInt) {
    this.set("totalRewards", Value.fromBigInt(value));
  }

  get stakedTokens(): BigInt {
    let value = this.get("stakedTokens");
    return value.toBigInt();
  }

  set stakedTokens(value: BigInt) {
    this.set("stakedTokens", Value.fromBigInt(value));
  }

  get stakingToken(): Bytes {
    let value = this.get("stakingToken");
    return value.toBytes();
  }

  set stakingToken(value: Bytes) {
    this.set("stakingToken", Value.fromBytes(value));
  }

  get stakingTokenTotalSupply(): BigInt {
    let value = this.get("stakingTokenTotalSupply");
    return value.toBigInt();
  }

  set stakingTokenTotalSupply(value: BigInt) {
    this.set("stakingTokenTotalSupply", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }
}
